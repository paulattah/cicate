# Generated by Django 4.2.5 on 2023-10-29 15:26

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=20, null=True)),
                ("middle_name", models.CharField(blank=True, max_length=20)),
                ("surname", models.CharField(max_length=20, null=True)),
                ("Username", models.CharField(max_length=256, unique=True)),
                ("date_of_birth", models.DateField(null=True)),
                ("degree", models.CharField(max_length=200, null=True)),
                ("country_of_birth", models.TextField(max_length=200, null=True)),
                ("native_language", models.TextField(max_length=200, null=True)),
                ("country_of_citizenship", models.TextField(max_length=200, null=True)),
                ("email", models.EmailField(max_length=256, unique=True)),
                ("institution_name", models.CharField(max_length=250, null=True)),
                ("Acronym", models.CharField(blank=True, max_length=50)),
                ("biography", models.TextField(blank=True, max_length=500)),
                ("type_of_unversity", models.CharField(max_length=50, null=True)),
                ("location", models.CharField(max_length=50, null=True)),
                ("linkedin", models.URLField(blank=True, null=True)),
                ("twitter", models.URLField(blank=True)),
                ("facebook", models.URLField(blank=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "usertype",
                    models.CharField(
                        choices=[
                            ("candidate", "Candidate"),
                            ("institution", "Institution"),
                        ],
                        default="candidate",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
